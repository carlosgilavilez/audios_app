const Player = (function () { const byId = function (id) { return document.getElementById(id); }; const audio = byId('pl-audio'); if (!audio) { return { bind: function () {}, restore: function () {} }; } const sticky = byId('sticky-player'); const btnPlay = byId('pl-play'); const iconPlay = byId('pl-play-icon'); const iconPause = byId('pl-pause-icon'); const btnPrev = byId('pl-prev'); const btnNext = byId('pl-next'); const btnBack10 = byId('pl-back-10'); const btnForward10 = byId('pl-forward-10'); const lblTitle = byId('pl-title'); const lblAuthor = byId('pl-author'); const seek = byId('pl-seek'); const cur = byId('pl-current'); const dur = byId('pl-duration'); const vol = byId('pl-volume'); const btnVol = byId('pl-volume-toggle'); const rate = byId('pl-rate'); const aDownload = byId('pl-download'); const btnPlayMinimized = byId('pl-play-minimized'); const iconPlayMinimized = byId('pl-play-icon-minimized'); const iconPauseMinimized = byId('pl-pause-icon-minimized'); const lblTitleMinimized = byId('pl-title-minimized'); const lblAuthorMinimized = byId('pl-author-minimized'); const seekMinimized = byId('pl-seek-minimized'); const btnPlayExpanded = byId('pl-play-expanded'); const iconPlayExpanded = byId('pl-play-icon-expanded'); const iconPauseExpanded = byId('pl-pause-icon-expanded'); const btnPrevExpanded = byId('pl-prev-expanded'); const btnNextExpanded = byId('pl-next-expanded'); const btnBack10Expanded = byId('pl-back-10-expanded'); const btnForward10Expanded = byId('pl-forward-10-expanded'); const lblTitleExpanded = byId('pl-title-expanded'); const lblAuthorExpanded = byId('pl-author-expanded'); const seekExpanded = byId('pl-seek-expanded'); const curExpanded = byId('pl-current-expanded'); const durExpanded = byId('pl-duration-expanded'); const aDownloadExpanded = byId('pl-download-expanded'); const expandToggle = byId('pl-expand'); const collapseToggle = byId('pl-collapse'); let isExpanded = false; const setExpanded = (value) => { if (!sticky) return; const expanded = !!value; isExpanded = expanded; sticky.setAttribute('data-player-expanded', expanded ? 'true' : 'false'); document.body.classList.toggle('player-expanded', expanded); }; if (expandToggle) { expandToggle.addEventListener("click", function (event) { event.preventDefault(); setExpanded(true); }); } if (collapseToggle) { collapseToggle.addEventListener("click", function (event) { event.preventDefault(); setExpanded(false); }); } function fmt(value) { if (!isFinite(value) || value < 0) return '0:00'; const minutes = Math.floor(value / 60); const seconds = Math.floor(value % 60); return minutes + ':' + (seconds < 10 ? '0' + seconds : String(seconds)); } function sanitizeName(name) { const base = (name || '').toString().trim() || 'audio'; const cleaned = base.replace(/[\\/:*?"<>|]+/g, ''); return cleaned.slice(0, 60) || 'audio'; } function updateDownload(title, fallback) { if (aDownload) { const href = fallback || ''; if (href) { aDownload.setAttribute('href', href); } const extCandidate = href.split('?')[0].split('.').pop() || 'mp3'; const ext = extCandidate.length <= 4 ? extCandidate : 'mp3'; aDownload.setAttribute('download', sanitizeName(title) + '.' + ext); } if (aDownloadExpanded) { const href = fallback || ''; if (href) { aDownloadExpanded.setAttribute('href', href); } const extCandidate = href.split('?')[0].split('.').pop() || 'mp3'; const ext = extCandidate.length <= 4 ? extCandidate : 'mp3'; aDownloadExpanded.setAttribute('download', sanitizeName(title) + '.' + ext); } } function showSticky() { if (!sticky) return; sticky.classList.remove('hidden'); requestAnimationFrame(function () { sticky.classList.remove('opacity-0'); sticky.classList.remove('translate-y-2'); }); } function setPlayUI(playing) { if (iconPlay) iconPlay.classList.toggle('hidden', playing); if (iconPause) iconPause.classList.toggle('hidden', !playing); if (btnPlay) { btnPlay.setAttribute('aria-label', playing ? 'Pausar' : 'Reproducir'); btnPlay.setAttribute('aria-pressed', playing ? 'true' : 'false'); } if (iconPlayMinimized) iconPlayMinimized.classList.toggle('hidden', playing); if (iconPauseMinimized) iconPauseMinimized.classList.toggle('hidden', !playing); if (btnPlayMinimized) { btnPlayMinimized.setAttribute('aria-label', playing ? 'Pausar' : 'Reproducir'); btnPlayMinimized.setAttribute('aria-pressed', playing ? 'true' : 'false'); } if (iconPlayExpanded) iconPlayExpanded.classList.toggle('hidden', playing); if (iconPauseExpanded) iconPauseExpanded.classList.toggle('hidden', !playing); if (btnPlayExpanded) { btnPlayExpanded.setAttribute('aria-label', playing ? 'Pausar' : 'Reproducir'); btnPlayExpanded.setAttribute('aria-pressed', playing ? 'true' : 'false'); } } function clearRowStates() { const activeScope = document.querySelector('[data-wp-section]:not([hidden]) [data-view-active="true"]') || document.querySelector('[data-view-active="true"]'); if (!activeScope) return; const buttons = activeScope.querySelectorAll('.btn-play'); buttons.forEach(function (button) { button.classList.remove('bg-success', 'text-success-foreground'); button.classList.add('bg-card', 'text-success'); const playIcon = button.querySelector('.icon-play'); if (playIcon) playIcon.classList.remove('hidden'); const eqIcon = button.querySelector('.icon-eq'); if (eqIcon) eqIcon.classList.add('hidden'); }); } function activateRow(button) { if (!button) return; button.classList.remove('bg-card', 'text-success'); button.classList.add('bg-success', 'text-success-foreground'); const playIcon = button.querySelector('.icon-play'); if (playIcon) playIcon.classList.add('hidden'); const eqIcon = button.querySelector('.icon-eq'); if (eqIcon) eqIcon.classList.remove('hidden'); if (typeof button.focus === 'function') { button.focus({ preventScroll: true }); } } async function load(i) { if (i < 0 || i >= items.length) return; index = i; const btn = items[index]; let src = ''; let title = ''; let author = ''; let download = ''; if (window.audioPlaylist && window.audioPlaylist[index]) { const audioData = window.audioPlaylist[index]; src = audioData.play_url || ''; title = audioData.title || ''; author = audioData.artist || ''; download = audioData.download_url || ''; } else if (btn) { src = btn.dataset.audioSrc || ''; title = btn.dataset.title || ''; author = btn.dataset.author || ''; download = btn.dataset.download || ''; } if (lblTitle) lblTitle.textContent = title || '-'; if (lblAuthor) lblAuthor.textContent = author || '-'; if (lblTitleMinimized) lblTitleMinimized.textContent = title || '-'; if (lblAuthorMinimized) lblAuthorMinimized.textContent = author || '-'; if (lblTitleExpanded) lblTitleExpanded.textContent = title || '-'; if (lblAuthorExpanded) lblAuthorExpanded.textContent = author || '-'; updateDownload(title, download || src); audio.pause(); if (src) { audio.src = src; audio.load(); } clearRowStates(); activateRow(btn); showSticky(); try { await audio.play(); setPlayUI(true); } catch (error) { console.error('play()', error); setPlayUI(false); } } function bind() { const activeScope = document.querySelector('[data-wp-section]:not([hidden]) [data-view-active="true"]') || document.querySelector('[data-view-active="true"]') || document; items = Array.from(activeScope.querySelectorAll('.btn-play[data-audio-src]')); items.forEach(function (button, i) { button.dataset.index = i; if (button.dataset.playerBound === '1') return; button.dataset.playerBound = '1'; button.addEventListener('click', function (event) { event.preventDefault(); const targetSrc = button.dataset.audioSrc; if (!targetSrc) return; if (audio.src === targetSrc) { if (audio.paused) { index = i; clearRowStates(); activateRow(button); showSticky(); audio.play().then(function () { setPlayUI(true); }).catch(function () {}); } else { audio.pause(); } return; } load(i); }); }); } function skipBy(delta) { if (!isFinite(delta)) return; const total = isFinite(audio.duration) ? audio.duration : 0; const current = isFinite(audio.currentTime) ? audio.currentTime : 0; const next = Math.max(0, Math.min(total, current + delta)); audio.currentTime = next; if (!dragging && seek) seek.value = String(Math.floor(next)); if (!dragging && seekMinimized) seekMinimized.value = String(Math.floor(next)); if (!dragging && seekExpanded) seekExpanded.value = String(Math.floor(next)); if (cur) cur.textContent = fmt(next); if (curExpanded) curExpanded.textContent = fmt(next); } function setupPlayerActions(btn, btnMin, btnExp) { const handler = function () { if (audio.paused) { audio.play().then(function () { setPlayUI(true); }).catch(function () {}); } else { audio.pause(); setPlayUI(false); } }; if (btn) btn.addEventListener('click', handler); if (btnMin) btnMin.addEventListener('click', handler); if (btnExp) btnExp.addEventListener('click', handler); } setupPlayerActions(btnPlay, btnPlayMinimized, btnPlayExpanded); function setupSkipButton(btn, btnExp, delta) { const handler = function () { skipBy(delta); }; if (btn) btn.addEventListener('click', handler); if (btnExp) btnExp.addEventListener('click', handler); } setupSkipButton(btnBack10, btnBack10Expanded, -10); setupSkipButton(btnForward10, btnForward10Expanded, 10); function setupNavButton(btn, btnExp, direction) { const handler = function () { if (direction === 'prev' && index > 0) { bind(); load(index - 1); } else if (direction === 'next' && index < items.length - 1) { bind(); load(index + 1); } }; if (btn) btn.addEventListener('click', handler); if (btnExp) btnExp.addEventListener('click', handler); } setupNavButton(btnPrev, btnPrevExpanded, 'prev'); setupNavButton(btnNext, btnNextExpanded, 'next'); audio.addEventListener('loadedmetadata', function () { const duration = Math.floor(audio.duration || 0); if (seek) seek.max = String(duration); if (seekMinimized) seekMinimized.max = String(duration); if (seekExpanded) seekExpanded.max = String(duration); if (dur) dur.textContent = fmt(duration); if (durExpanded) durExpanded.textContent = fmt(duration); }); audio.addEventListener('timeupdate', function () { const current = Math.floor(audio.currentTime || 0); if (!dragging && seek) seek.value = String(current); if (!dragging && seekMinimized) seekMinimized.value = String(current); if (!dragging && seekExpanded) seekExpanded.value = String(current); if (cur) cur.textContent = fmt(current); if (curExpanded) curExpanded.textContent = fmt(current); }); function commitSeek() { if (!seek && !seekMinimized && !seekExpanded) return; const value = Number(seek.value || seekMinimized.value || seekExpanded.value || 0); if (isFinite(value)) audio.currentTime = value; dragging = false; } function setupSeek(s) { if (s) { s.addEventListener('input', function () { dragging = true; const val = Number(s.value); if (cur) cur.textContent = fmt(val); if (curExpanded) curExpanded.textContent = fmt(val); }); s.addEventListener('change', commitSeek); s.addEventListener('mouseup', commitSeek); s.addEventListener('touchend', commitSeek, { passive: true }); } } setupSeek(seek); setupSeek(seekMinimized); setupSeek(seekExpanded); function updateVolumeIcon() { if (!btnVol) return; const icon = btnVol.querySelector('i'); if (!icon) return; if (audio.muted || audio.volume === 0) { icon.setAttribute('data-lucide', 'volume-x'); } else if (audio.volume < 0.5) { icon.setAttribute('data-lucide', 'volume-1'); } else { icon.setAttribute('data-lucide', 'volume-2'); } if (window.lucide) { window.lucide.createIcons(); } } if (btnVol) { btnVol.addEventListener('click', function () { if (audio.muted) { audio.muted = false; audio.volume = lastVolume; if (vol) vol.value = String(lastVolume); } else { lastVolume = audio.volume; audio.muted = true; if (vol) vol.value = '0'; } updateVolumeIcon(); }); } if (vol) { vol.addEventListener('input', function () { const value = Number(vol.value); if (isFinite(value)) { audio.volume = Math.max(0, Math.min(1, value)); audio.muted = value === 0; } updateVolumeIcon(); }); } audio.addEventListener('volumechange', updateVolumeIcon); if (rate) { rate.addEventListener('change', function () { const value = Number((rate.value || '').replace('x', '')); if (isFinite(value) && value > 0) { audio.playbackRate = value; } }); } audio.addEventListener('ended', function () { setPlayUI(false); clearRowStates(); }); function toggleEqForCurrent(show) { if (index < 0 || index >= items.length) return; const button = items[index]; const eqIcon = button.querySelector('.icon-eq'); if (eqIcon) eqIcon.classList.toggle('hidden', !show); const playIcon = button.querySelector('.icon-play'); if (playIcon) playIcon.classList.toggle('hidden', show); } audio.addEventListener('play', function () { setPlayUI(true); toggleEqForCurrent(true); }); audio.addEventListener('pause', function () { setPlayUI(false); toggleEqForCurrent(false); }); const persistKey = 'pl-state'; let lastSaveAt = 0; function saveState() { try { const state = { src: audio.currentSrc || audio.src || '', title: lblTitle ? lblTitle.textContent || '' : '', author: lblAuthor ? lblAuthor.textContent || '' : '', download: aDownload ? aDownload.getAttribute('href') || '' : '', index: index, currentTime: Number(audio.currentTime || 0), paused: audio.paused, volume: Number(audio.volume || 1), rate: Number(audio.playbackRate || 1) }; localStorage.setItem(persistKey, JSON.stringify(state)); } catch (error) {} } audio.addEventListener('timeupdate', function () { const now = Date.now(); if (now - lastSaveAt > 1000) { lastSaveAt = now; saveState(); } }); audio.addEventListener('play', saveState); audio.addEventListener('pause', saveState); window.addEventListener('beforeunload', saveState); document.addEventListener('visibilitychange', function () { if (document.visibilityState === 'hidden') saveState(); }); async function restore() { try { const raw = localStorage.getItem(persistKey); if (!raw) return; const st = JSON.parse(raw); if (!st || !st.src) return; const match = Array.from(document.querySelectorAll('.btn-play[data-audio-src]')) .find(function (button) { return button.dataset.audioSrc === st.src; }); if (match) { items = Array.from(document.querySelectorAll('.btn-play[data-audio-src]')); index = Number(match.dataset.index || items.indexOf(match)); clearRowStates(); activateRow(match); } else { index = -1; } if (lblTitle) lblTitle.textContent = st.title || '-'; if (lblAuthor) lblAuthor.textContent = st.author || '-'; if (lblTitleMinimized) lblTitleMinimized.textContent = st.title || '-'; if (lblAuthorMinimized) lblAuthorMinimized.textContent = st.author || '-'; if (lblTitleExpanded) lblTitleExpanded.textContent = st.title || '-'; if (lblAuthorExpanded) lblAuthorExpanded.textContent = st.author || '-'; if (aDownload) { aDownload.href = st.download || st.src; updateDownload(st.title, st.download || st.src); } audio.pause(); audio.src = st.src; audio.load(); showSticky(); if (isFinite(st.volume)) { try { audio.volume = Math.max(0, Math.min(1, Number(st.volume))); } catch (error) {} if (vol) vol.value = String(audio.volume); } if (isFinite(st.rate) && st.rate > 0) { try { audio.playbackRate = Number(st.rate); } catch (error) {} if (rate) { const val = audio.playbackRate + 'x'; const options = Array.from(rate.options || []); if (options.some(function (opt) { return opt.value === val; })) { rate.value = val; } } } const seekTo = Number(st.currentTime || 0); if (isFinite(seekTo) && seekTo > 0) { audio.addEventListener('loadedmetadata', function handleLoaded() { audio.removeEventListener('loadedmetadata', handleLoaded); try { audio.currentTime = seekTo; } catch (error) {} }); } if (st.paused === false) { try { await audio.play(); setPlayUI(true); } catch (error) {} } else { setPlayUI(false); } } catch (error) {} } return { bind: bind, restore: restore }; })(); document.addEventListener('DOMContentLoaded', function () { if (!Player || typeof Player.bind !== 'function') return; Player.bind(); const skipRestore = /^(?:\/admin|\/editor)\b/.test(location.pathname); if (!skipRestore && typeof Player.restore === 'function') { Player.restore(); } });