name: Deploy to Production

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Map secrets to env to allow usage in `if:` expressions cleanly
      TARGET_DIR: ${{ secrets.TARGET_DIR }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install JS deps
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          extensions: mbstring, intl, pdo_mysql

      - name: Install PHP deps
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      - name: Package code for deploy
        run: |
          tar -czf deploy.tar.gz \
            app \
            bootstrap \
            config \
            database \
            public \
            resources \
            routes \
            vendor \
            artisan \
            composer.json \
            composer.lock

      - name: Bootstrap SSH public key (optional)
        if: ${{ env.SSH_PUBLIC_KEY != '' && env.SSH_PASSWORD != '' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          script: |
            set -e
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            AUTH=~/.ssh/authorized_keys
            touch "$AUTH"
            chmod 600 "$AUTH"
            PUB="${{ env.SSH_PUBLIC_KEY }}"
            grep -qxF "$PUB" "$AUTH" || echo "$PUB" >> "$AUTH"

      - name: Upload package (key)
        if: ${{ env.SSH_KEY != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          source: "deploy.tar.gz"
          target: "${{ env.TARGET_DIR }}"

      - name: Upload package (password)
        if: ${{ env.SSH_KEY == '' && env.SSH_PASSWORD != '' }}
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          source: "deploy.tar.gz"
          target: "${{ env.TARGET_DIR }}"

      - name: SSH deploy extract and caches (key)
        if: ${{ env.SSH_KEY != '' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          script: |
            set -euxo pipefail
            mkdir -p "${TARGET_DIR}"
            cd "${TARGET_DIR}"
            tar -xzf deploy.tar.gz
            rm -f deploy.tar.gz
            php artisan migrate --force || true
            # Ensure base seed data (idempotent)
            php artisan db:seed --class="Database\\Seeders\\CategoriaSeeder" --force || true
            php artisan db:seed --class="Database\\Seeders\\TurnoSeeder" --force || true
            php artisan db:seed --class="Database\\Seeders\\LibroSeeder" --force || true
            php artisan optimize:clear || true
            php artisan config:cache || true
            php artisan route:cache || true
            php artisan view:clear || true
            php artisan storage:link || true

      - name: SSH deploy extract and caches (password)
        if: ${{ env.SSH_KEY == '' && env.SSH_PASSWORD != '' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          script_stop: true
          script: |
            set -euxo pipefail
            mkdir -p "${TARGET_DIR}"
            cd "${TARGET_DIR}"
            tar -xzf deploy.tar.gz
            rm -f deploy.tar.gz
            php artisan migrate --force || true
            # Ensure base seed data (idempotent)
            php artisan db:seed --class="Database\\Seeders\\CategoriaSeeder" --force || true
            php artisan db:seed --class="Database\\Seeders\\TurnoSeeder" --force || true
            php artisan db:seed --class="Database\\Seeders\\LibroSeeder" --force || true
            php artisan optimize:clear || true
            php artisan config:cache || true
            php artisan route:cache || true
            php artisan view:clear || true
            php artisan storage:link || true

      # Assets van dentro del paquete; pasos de SCP adicionales ya no son necesarios.
